{"version":3,"sources":["cmps/NavBar/NavBar.js","services/utils.js","cmps/CityWeather/CardItem.js","cmps/CityWeather/Cards.js","cmps/CityWeather/CityWeather.js","services/dataService.js","actions/dataActions.js","cmps/Input/Input.js","hooks/useGeoLocation.js","pages/weatherDetails/WeatherDetails.js","pages/Favorites/CardItem.js","pages/Favorites/Cards.js","pages/Favorites/Favorites.js","cmps/Modal/Modal.js","cmps/ToggleBtns/ToggleBtns.js","cmps/SideBar/SideBar.js","App.js","reportWebVitals.js","reducers/dataReducer.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","toolBar","display","justifyContent","right","minWidth","linkWrapper","flexDirection","color","textDecoration","alignItems","NavBar","classes","className","AppBar","position","Toolbar","Typography","variant","title","to","storageService","key","value","str","JSON","stringify","localStorage","setItem","defaultValue","getItem","parse","getRandomId","length","txt","possible","i","charAt","Math","floor","random","CardItem","props","dayNum","card","todayDate","Date","Temperature","Maximum","Value","Unit","Minimum","style","backgroundImage","Day","Icon","getDay","Cards","cardItems","temperatureUnit","map","item","CityWeather","list","cityValue","updateFavoriteCities","favoriteCities","Fragment","WeatherIcon","LocalizedName","ApparentTemperature","Metric","Imperial","getTempValue","findIndex","listItem","Key","fill","cursor","onClick","WeatherText","dailyForecasts","API_KEY","getCityWeatherInfoByKey","a","path","fetch","res","json","data","console","error","getAutoComplete","toLowerCase","getCityDailyForecasts","isMetric","getCityWeatherInfoByCoords","coords","lat","lng","_SetCity","city","type","_showModal","modalInfo","_updateFavoriteCities","_loadFavoriteCities","toggleTemperatureUnit","dispatch","loadFavoriteCities","favoriteCityFromStorage","setCity","Promise","all","cityWeather","cityForecast","cityToSet","DailyForecasts","msg","createMuiTheme","overrides","MuiInputBase","backgroundColor","Input","setSearchResault","React","useState","open","setOpen","options","setOptions","erorState","setError","loading","useEffect","_onChange","e","target","active","match","countries","name","ThemeProvider","Autocomplete","id","width","onChange","onOpen","onClose","getOptionSelected","option","getOptionLabel","renderInput","params","TextField","label","InputProps","endAdornment","CircularProgress","size","useGeoLocation","loaded","coordinates","location","setLocation","onSuccess","latitude","longitude","onError","navigator","code","message","geolocation","getCurrentPosition","mapDispatchToProps","cityToSave","setCityByLocation","cityLocation","connect","state","isDarkMode","useParams","history","useHistory","push","closeModal","modalState","isModalShowen","setTimeout","borderColor","modalMsg","toggleDarkMode","FormControlLabel","control","Switch","checked","SideBar","setState","toggleDrawer","anchor","event","Button","Drawer","App","component","Favorites","exact","WeatherDetails","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","existInFavorites","favoriteCityIds","isExistInFavorites","unitToSave","modeToSave","modalToSave","modalStateCopy","favoriteCitiesCopy","cityCopyToUpdate","idxIfFind","favorite","splice","filter","Object","keys","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3aebc34c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n\n  toolBar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  right: {\n    minWidth: \"150px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  linkWrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    color: \"inherit\",\n    textDecoration: \"unset\",\n    alignItems: \"center\",\n  },\n}));\n\nconst NavBar = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolBar}>\n          <Typography variant=\"h6\" className={classes.title}>\n            <Link to=\"/\" className={classes.linkWrapper}>\n              Weather\n            </Link>\n          </Typography>\n\n          <Typography className={classes.right}>\n            <NavLink to=\"/favorites\" className={classes.linkWrapper}>\n              <FavoriteIcon />\n              Favorites\n            </NavLink>\n            <NavLink to=\"/\" className={classes.linkWrapper}>\n              <CloudIcon />\n              Weather\n            </NavLink>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","export const storageService = {\n  save: (key, value) => {\n    var str = JSON.stringify(value);\n    localStorage.setItem(key, str);\n  },\n\n  load: (key, defaultValue) => {\n    return localStorage.getItem(key)\n      ? JSON.parse(localStorage.getItem(key))\n      : defaultValue;\n  },\n};\n\nexport function checkIfExist(item, list) {\n  let idx = -1;\n  idx =\n    list.length && item\n      ? list.findIndex((listItem) => listItem.Key === item.Key)\n      : -1;\n  return idx >= 0 ? true : false;\n}\n\nexport function getRandomId(length = 6) {\n  var txt = \"\";\n  var possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return txt;\n}\nexport function getDayOfWeek(dayNum) {\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  return days[dayNum];\n}\n","import React from \"react\";\nimport { getDayOfWeek } from \"../../services/utils\";\n\nconst CardItem = (props) => {\n  const { card } = props;\n  const todayDate = card.Date ? new Date(card.Date) : new Date();\n  return (\n    <div className=\"cardItem\">\n      <span>\n        Day: {card?.Temperature.Maximum.Value}\n        {card?.Temperature.Maximum.Unit}\n      </span>\n      <span>\n        Night: {card?.Temperature.Minimum.Value}\n        {card?.Temperature.Minimum.Unit}\n      </span>\n      <div\n        className=\"weatherImgContainer\"\n        style={{ backgroundImage: `url('./images/${card?.Day.Icon}.png')` }}\n      ></div>\n      <span className=\"day\">{getDayOfWeek(todayDate.getDay())}</span>\n    </div>\n  );\n};\n\nexport default CardItem;\n","import React from \"react\";\nimport CardItem from \"./CardItem\";\nimport { getRandomId } from \"../../services/utils\";\n\nconst Cards = (props) => {\n  const { cardItems, temperatureUnit } = props;\n  return (\n    <div className=\"cards\">\n      {cardItems\n        ? cardItems.map((item) => (\n            <CardItem\n              key={getRandomId()}\n              card={item}\n              temperatureUnit={temperatureUnit}\n            />\n          ))\n        : \"\"}\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport Cards from \"./Cards\";\nimport \"./cityWeather.scss\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport { checkIfExist } from \"../../services/utils\";\n\nconst CityWeather = (props) => {\n  const {\n    cityValue,\n    updateFavoriteCities,\n    temperatureUnit,\n    favoriteCities,\n  } = props;\n  const getTempValue = () => {\n    if (temperatureUnit === \"Metric\") {\n      return (\n        cityValue?.ApparentTemperature?.Metric?.Value +\n        cityValue?.ApparentTemperature?.Metric?.Unit\n      );\n    } else {\n      return (\n        cityValue?.ApparentTemperature?.Imperial?.Value +\n        cityValue?.ApparentTemperature?.Imperial?.Unit\n      );\n    }\n  };\n\n  return (\n    <div className=\"cityWeather\">\n      {cityValue ? (\n        <React.Fragment>\n          <div className=\"topSection\">\n            <div className=\"left\">\n              <div>\n                <div\n                  className=\"weatherImgContainer\"\n                  style={{\n                    backgroundImage: `url('./images/${cityValue?.WeatherIcon}.png')`,\n                  }}\n                ></div>\n              </div>\n              <div>\n                <span>{cityValue?.LocalizedName}</span>\n                <span>{getTempValue()}</span>\n              </div>\n            </div>\n            <div className=\"right\">\n              {checkIfExist(cityValue, favoriteCities) ? (\n                <FavoriteIcon\n                  style={{ fill: \"red\" ,cursor:'pointer'}}\n                  onClick={() => updateFavoriteCities(cityValue)}\n                />\n              ) : (\n                <FavoriteBorderIcon\n                  style={{ fill: \"red\",cursor:'pointer' }}\n                  onClick={() => updateFavoriteCities(cityValue)}\n                />\n              )}\n            </div>\n          </div>\n          <h2 className=\"weatherDescription\">{cityValue?.WeatherText}</h2>\n          <Cards\n            cardItems={cityValue?.dailyForecasts}\n            temperatureUnit={temperatureUnit}\n          />\n        </React.Fragment>\n      ) : (\n        <span>There is no cities to show</span>\n      )}\n    </div>\n  );\n};\n\nexport default CityWeather;\n","const API_KEY = \"FM8dK4YJ8ogaN7NpHrCsugUzGniIr1Gg\";\n\nexport const getCityWeatherInfoByKey = async (key) => {\n  const path = `https://dataservice.accuweather.com/currentconditions/v1/${key}?apikey=${API_KEY}&details=true`;\n  try {\n    const res = await fetch(path);\n    const data = await res.json();\n    return [...data];\n  } catch (ex) {\n    console.error(key, ex);\n  }\n};\n\nexport const getAutoComplete = async (value) => {\n  const path = `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${value.toLowerCase()}`;\n\n  try {\n    const res = await fetch(path);\n    const data = await res.json();\n    return { ...data };\n  } catch (ex) {\n    console.error(value, ex);\n  }\n};\n\nexport const getCityDailyForecasts = async (key, isMetric) => {\n  const path = `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?apikey=${API_KEY}&metric=${isMetric}`;\n  try {\n    const res = await fetch(path);\n    const data = await res.json();\n    return { ...data };\n  } catch (ex) {\n    console.error(key, ex);\n  }\n};\n\nexport const getCityWeatherInfoByCoords = async (coords) => {\n  const path = `https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${coords.lat},${coords.lng}&details=true`;\n  try {\n    const res = await fetch(path);\n    const data = await res.json();\n    return { ...data };\n  } catch (ex) {\n    console.error(coords, ex);\n  }\n};\n","import { storageService } from \"../services/utils\";\nimport {\n  getCityWeatherInfoByKey,\n  getCityDailyForecasts,\n  getCityWeatherInfoByCoords,\n} from \"../services/dataService\";\n\nconst _SetCity = (city) => ({ type: \"SET_CITY_WEATHER\", city: city });\nconst _showModal = (modalInfo) => ({\n  type: \"SHOW_MODAL\",\n  modalInfo: modalInfo,\n});\nconst _closeModal = () => ({ type: \"CLOSE_MODAL\" });\nconst _toggleTemperatureUnit = () => ({ type: \"TOGGLE_TEMPERATURE_UNIT\" });\nconst _toggleDarkMode= () => ({ type: \"TOGGLE_DARK_MODE\" });\nconst _updateFavoriteCities = (city) => {\n  return {\n    type: \"UPDATE_FAVORITE_CITIES\",\n    city: city,\n  };\n};\n\nconst _loadFavoriteCities = (favoriteCities) => {\n  return {\n    type: \"LOAD_FAVORITES_CITIES\",\n    favoriteCities: favoriteCities,\n  };\n};\n\nexport function toggleTemperatureUnit() {\n  return (dispatch) => {\n    dispatch(_toggleTemperatureUnit());\n  };\n}\n\nexport function toggleDarkMode() {\n  return (dispatch) => {\n    dispatch(_toggleDarkMode());\n  };\n}\n\nexport function updateFavoriteCities(city) {\n  return async (dispatch) => {\n    const cityWeather = await getCityWeatherInfoByKey(city.Key);\n\n    const cityToSave = cityWeather\n      ? {\n          ...cityWeather[0],\n          LocalizedName: city.LocalizedName,\n          Key: city.Key,\n        }\n      : null;\n\n    dispatch(_updateFavoriteCities(cityToSave));\n  };\n}\n\nexport function loadFavoriteCities() {\n  const favoriteCityFromStorage =\n    storageService.load(\"favoriteCities\", []) || [];\n  return async (dispatch) => {\n    if (favoriteCityFromStorage && favoriteCityFromStorage[0]) {\n      dispatch(_loadFavoriteCities(favoriteCityFromStorage));\n    } else {\n      dispatch(_loadFavoriteCities([]));\n    }\n  };\n}\n\nexport function showModal(modalInfo) {\n  return (dispatch) => dispatch(_showModal(modalInfo));\n}\n\nexport function closeModal() {\n  return (dispatch) => dispatch(_closeModal());\n}\n\n\n\nexport function setCityByLocation(coords, temperatureUnit) {\n  return async (dispatch) => {\n    const cityLocation = await getCityWeatherInfoByCoords(coords);\n    let [cityWeather, cityForecast] = await Promise.all([\n      getCityWeatherInfoByKey(cityLocation?.Key || \"123\"),\n      getCityDailyForecasts(\n        cityLocation?.Key || \"123\",\n        temperatureUnit === \"Metric\" ? true : false\n      ),\n    ]);\n\n    const cityToSet =\n      cityWeather && cityForecast\n        ? {\n            ...cityWeather[0],\n            Key: cityLocation.Key,\n            LocalizedName: cityLocation.LocalizedName,\n            dailyForecasts: [...cityForecast.DailyForecasts],\n          }\n        : null;\n    dispatch(_SetCity(cityToSet));\n  };\n}\n\nexport function setCity(city, temperatureUnit) {\n  return async (dispatch) => {\n    let [cityWeather, cityForecast] = await Promise.all([\n      getCityWeatherInfoByKey(city.Key),\n      getCityDailyForecasts(\n        city.Key,\n        temperatureUnit === \"Metric\" ? true : false\n      ),\n    ]);\n\n    if (cityWeather && cityForecast) {\n      const cityToSet = {\n        ...cityWeather[0],\n        LocalizedName: city.LocalizedName,\n        Key: city.Key,\n        dailyForecasts: cityForecast.DailyForecasts,\n      };\n      dispatch(_SetCity(cityToSet));\n    } else {\n      dispatch(\n        _showModal({\n          type: \"Failed\",\n          msg: `Failed to Fetch Data for server`,\n        })\n      );\n    }\n  };\n}\n","import React, { useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { getAutoComplete } from \"../../services/dataService\";\nconst theme = createMuiTheme({\n  overrides: {\n    MuiInputBase: {\n      root: {\n        backgroundColor: \"#fff\",\n      },\n    },\n  },\n});\nconst Input = (props) => {\n  const { setSearchResault } = props;\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const [erorState, setError] = React.useState(false);\n  const loading = open && options?.length === 0;\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const _onChange = (e) => {\n    const { value } = e.target;\n    let active = true;\n    const englishRgx = /^[a-zA-Z]*$/;\n\n    if (!value.match(englishRgx)) {\n      setError(true);\n    } else if (erorState) {\n      setError(false);\n    }\n    if (!loading) {\n      return undefined;\n    }\n    (async () => {\n      const countries = await getAutoComplete(value);\n      if (active && countries?.length && !erorState) {\n        setOptions(\n          countries.map((item) => {\n            return { ...item, name: item?.LocalizedName };\n          })\n        );\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Autocomplete\n        id=\"asynchronous-demo\"\n        style={{ width: 300 }}\n        open={open}\n        onChange={(e, value) => setSearchResault(value)}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) => option.name === value.name}\n        getOptionLabel={(option) => option.name}\n        options={options}\n        loading={loading}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={erorState ? \"English Only!\" : \"Search City\"}\n            variant=\"outlined\"\n            onChange={_onChange}\n            error={erorState}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <React.Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </React.Fragment>\n              ),\n            }}\n          />\n        )}\n      />\n    </ThemeProvider>\n  );\n};\n\nexport default Input;\n","import React, { useEffect, useState } from \"react\";\n\nconst useGeoLocation = () => {\n  const [location, setLocation] = useState({\n    loaded: false,\n    coordinates: {\n      lat: \"\",\n      lng: \"\",\n    },\n  });\n\n  const onSuccess = (location) => {\n    setLocation({\n      loaded: true,\n      coordinates: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude,\n      },\n    });\n  };\n  const onError = (error) => {\n    setLocation({\n      loaded: true,\n      error,\n    });\n  };\n\n  useEffect(() => {\n    if (!(\"geoLocation\" in navigator)) {\n      onError({\n        code: 0,\n        message: \"Geolocation not supported\",\n      });\n    }\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\n  }, []);\n  return location;\n};\n\nexport default useGeoLocation;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport CityWeather from \"../../cmps/CityWeather/CityWeather\";\nimport { connect } from \"react-redux\";\nimport {\n  setCity,\n  isDarkMode,\n  setCityByLocation,\n  updateFavoriteCities,\n  loadFavoriteCities,\n  toggleTemperatureUnit,\n} from \"../../actions/dataActions\";\n\nimport Input from \"../../cmps/Input/Input\";\nimport \"./weatherDetails.scss\";\nimport useGeoLocation from \"../../hooks/useGeoLocation\";\n\nconst WeatherDetails = (props) => {\n  const {\n    city,\n    setCity,\n    isDarkMode,\n    favoriteCities,\n    temperatureUnit,\n    setCityByLocation,\n    loadFavoriteCities,\n    updateFavoriteCities,\n  } = props;\n  const location = useGeoLocation();\n  const { key } = useParams();\n\n  useEffect(() => {\n    !favoriteCities.length && loadFavoriteCities();\n  }, []);\n\n  useEffect(() => {\n    if (key) {\n      setCity({ Key: key }, temperatureUnit);\n    } else if (location?.coordinates?.lat) {\n      setCityByLocation(location.coordinates, temperatureUnit);\n    } else {\n      setCityByLocation(\n        { lat: \"32.109333\", lng: \"34.855499\" },\n        temperatureUnit\n      );\n    }\n  }, []);\n\n  const handleSetCity = (city) => {\n    setCity(city, temperatureUnit);\n  };\n  return (\n    <div\n      className={`weatherDetails ${isDarkMode ? \"darkMode\" : \"defaultMode\"}`}\n    >\n      <Input setSearchResault={handleSetCity} />\n      <CityWeather\n        cityValue={city}\n        favoriteCities={favoriteCities}\n        updateFavoriteCities={updateFavoriteCities}\n        temperatureUnit={temperatureUnit}\n      />\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  city: state.city,\n  isDarkMode: state.isDarkMode,\n  favoriteCities: state.favoriteCities,\n  temperatureUnit: state.temperatureUnit,\n});\nconst mapDispatchToProps = {\n  setCity,\n  updateFavoriteCities,\n  setCityByLocation,\n  loadFavoriteCities,\n  toggleTemperatureUnit,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherDetails);\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nconst CardItem = (props) => {\n  const { card, temperatureUnit, setCity } = props;\n  const history = useHistory();\n\n  const showWeather = () => {\n    setCity(card);\n    history.push(`/${card.Key}`);\n  };\n\n  const getTempValue = () => {\n    if (temperatureUnit === \"Metric\") {\n      return card?.Temperature?.Metric.Value + card?.Temperature?.Metric.Unit;\n    } else {\n      return card?.Temperature.Imperial.Value + card?.Temperature.Imperial.Unit;\n    }\n  };\n  return (\n    <div className=\"cardItem\" onClick={showWeather}>\n      <span className=\"cityName\">{card?.LocalizedName}</span>\n      <span className=\"temperature\">{getTempValue()}</span>\n      <div\n        className=\"weatherImgContainer\"\n        style={{ backgroundImage: `url('./images/${card?.WeatherIcon}.png')` }}\n      ></div>\n      <span className=\"weatherTxt\">{card?.WeatherText}</span>\n    </div>\n  );\n};\n\nexport default CardItem;\n","import React from \"react\";\nimport CardItem from \"./CardItem\";\nimport { getRandomId } from \"../../services/utils\";\n\nconst Cards = (props) => {\n  const { cardItems, temperatureUnit, setCity } = props;\n  return (\n    <div className=\"cardsContainer\">\n      {cardItems?.length ? (\n        cardItems.map(\n          (item) =>\n            item && (\n              <CardItem\n                key={getRandomId()}\n                temperatureUnit={temperatureUnit}\n                setCity={setCity}\n                card={item}\n              />\n            )\n        )\n      ) : (\n        <span>No favorite cities yet</span>\n      )}\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./favorites.scss\";\nimport { loadFavoriteCities, setCity } from \"../../actions/dataActions\";\nimport Cards from \"./Cards\";\n\nconst Favorites = (props) => {\n  const { favoriteCities, temperatureUnit,isDarkMode, setCity } = props;\n\n  return (\n    <div className={`favorites ${isDarkMode ? \"darkMode\" : \"defaultMode\"}`}>\n      <Cards\n        cardItems={favoriteCities}\n        temperatureUnit={temperatureUnit}\n        setCity={setCity}\n      />\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  isDarkMode: state.isDarkMode,\n  favoriteCities: state.favoriteCities,\n  temperatureUnit: state.temperatureUnit,\n});\nconst mapDispatchToProps = {\n  loadFavoriteCities,\n  setCity,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n","import React, { useEffect } from \"react\";\nimport \"./modal.scss\";\nimport { connect } from \"react-redux\";\nimport { closeModal } from \"../../actions/dataActions\";\n\nconst Modal = (props) => {\n  const { modalState, closeModal } = props;\n  useEffect(() => {\n    if (modalState?.isModalShowen) {\n      setTimeout(closeModal, 3000);\n    }\n  }, [modalState?.isModalShowen, closeModal]);\n\n  const getModalBorderColor = () => {\n    return modalState?.type === \"success\" ? \"rgb(154, 255, 2)\" : \"red\";\n  };\n  return (\n    <React.Fragment>\n      {props.modalState?.isModalShowen && (\n        <div className=\"modal\" style={{ borderColor: getModalBorderColor() }}>\n          <span>{modalState?.modalMsg}</span>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\nconst mapStateToProps = (state) => ({ modalState: state.modalState });\nconst mapDispatchToProps = { closeModal };\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n","import React from \"react\";\nimport \"./toggleBtns.scss\";\nimport { connect } from \"react-redux\";\nimport {\n  toggleTemperatureUnit,\n  toggleDarkMode,\n  setCity,\n} from \"../../actions/dataActions\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nconst ToggleBtns = (props) => {\n  const {\n    temperatureUnit,\n    toggleTemperatureUnit,\n    city,\n    setCity,\n    isDarkMode,\n    toggleDarkMode\n  } = props;\n\n  const handleToggle = () => {\n    setCity(city, temperatureUnit === \"Metric\" ? \"Imperial\" : \"Metric\");\n    toggleTemperatureUnit();\n  };\n  return (\n    <div className=\"toggleButtons\">\n      <FormControlLabel\n        control={\n          <Switch\n            checked={temperatureUnit === \"Metric\"}\n            onChange={handleToggle}\n            color=\"default\"\n          />\n        }\n        label={temperatureUnit}\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={isDarkMode}\n            onChange={toggleDarkMode}\n            color=\"default\"\n          />\n        }\n        label={isDarkMode ? \"Dark Mode\" : \"Default Mode\"}\n      />\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  temperatureUnit: state.temperatureUnit,\n  isDarkMode: state.isDarkMode,\n  city: state.city,\n});\nconst mapDispatchToProps = {\n  toggleTemperatureUnit,\n  setCity,\n  toggleDarkMode,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ToggleBtns);\n","import React, { useState } from \"react\";\nimport \"./sideBar.scss\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport ToggleBtns from \"../ToggleBtns/ToggleBtns\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n\nconst SideBar = () => {\n  const [state, setState] = useState({\n    right: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  return (\n    <div className=\"sideBar\">\n      <Button onClick={toggleDrawer(\"right\", true)}>\n        <SettingsIcon />\n      </Button>\n      <Drawer\n        anchor={\"right\"}\n        open={state[\"right\"]}\n        onClose={toggleDrawer(\"right\", false)}\n      >\n        <ToggleBtns />\n      </Drawer>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport NavBar from \"./cmps/NavBar/NavBar.js\";\nimport WeatherDetails from \"./pages/weatherDetails/WeatherDetails\";\nimport Favorites from \"./pages/Favorites/Favorites\";\nimport Modal from \"./cmps/Modal/Modal\";\nimport SideBar from \"./cmps/SideBar/SideBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router >\n        <NavBar />\n        <Switch>\n          <Route path=\"/favorites\" component={Favorites} exact />\n          <Route path=\"/:key?\" component={WeatherDetails} />\n          <Route path=\"/\" component={WeatherDetails} exact />\n        </Switch>\n      </Router>\n      <Modal />\n      <SideBar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { storageService } from \"../services/utils\";\nlet initialState = {\n  city: null,\n  favoriteCities: [],\n  modalState: { modalMsg: \"\", isModalShowen: false },\n  temperatureUnit: \"Metric\",\n  isDarkMode: false,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case \"SET_CITY_WEATHER\":\n      let idx;\n      let existInFavorites;\n      let cityToSave;\n      if (state.favoriteCityIds?.length) {\n        idx = state.favoriteCityIds.findIndex(\n          (city) => city.Key === action?.city?.Key\n        );\n        existInFavorites = idx >= 0 ? true : false;\n      }\n      if (action.city) {\n        cityToSave = {\n          city: { ...action.city, isExistInFavorites: existInFavorites },\n        };\n      } else {\n        cityToSave = null;\n      }\n      return {\n        ...state,\n        ...cityToSave,\n      };\n    case \"TOGGLE_TEMPERATURE_UNIT\":\n      const unitToSave =\n        state.temperatureUnit === \"Metric\" ? \"Imperial\" : \"Metric\";\n      return {\n        ...state,\n        temperatureUnit: unitToSave,\n      };\n    case \"TOGGLE_DARK_MODE\":\n      const modeToSave = !state.isDarkMode;\n      return {\n        ...state,\n        isDarkMode: modeToSave,\n      };\n    case \"SHOW_MODAL\":\n      const modalToSave = {\n        modalMsg: action.modalInfo.msg,\n        type: action.modalInfo.type,\n        isModalShowen: !state.isModalShowen,\n      };\n      return {\n        ...state,\n        modalState: modalToSave,\n      };\n    case \"CLOSE_MODAL\":\n      let modalStateCopy = { ...state.modalState };\n      modalStateCopy = {\n        modalMsg: \"\",\n        type: \"\",\n        isModalShowen: false,\n      };\n      return {\n        ...state,\n        modalState: modalStateCopy,\n      };\n\n    case \"UPDATE_FAVORITE_CITIES\":\n      let favoriteCitiesCopy = [...state.favoriteCities];\n      let cityCopyToUpdate = { ...state.city };\n      if (favoriteCitiesCopy.length && favoriteCitiesCopy[0] !== null) {\n        const idxIfFind = favoriteCitiesCopy?.findIndex(\n          (favorite) => favorite?.Key === action.city?.Key\n        );\n\n        if (idxIfFind >= 0) {\n          favoriteCitiesCopy.splice(idxIfFind, 1);\n          cityCopyToUpdate.isExistInFavorites = false;\n        } else {\n          favoriteCitiesCopy = [...favoriteCitiesCopy, action.city];\n          cityCopyToUpdate.isExistInFavorites = true;\n        }\n        favoriteCitiesCopy = favoriteCitiesCopy.filter(\n          (value) => Object.keys(value).length !== 0\n        );\n        storageService.save(\"favoriteCities\", favoriteCitiesCopy);\n      } else {\n        favoriteCitiesCopy = [action.city];\n        cityCopyToUpdate.isExistInFavorites = true;\n        favoriteCitiesCopy = favoriteCitiesCopy.filter(\n          (value) => Object.keys(value).length !== 0\n        );\n        storageService.save(\"favoriteCities\", [action.city]);\n      }\n\n      return {\n        ...state,\n        favoriteCities: favoriteCitiesCopy,\n        city: cityCopyToUpdate,\n      };\n\n    case \"LOAD_FAVORITES_CITIES\":\n      return {\n        ...state,\n        favoriteCities: action.favoriteCities,\n      };\n    default:\n      break;\n  }\n  return state;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n// import { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport dataReducer from './reducers/dataReducer';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(dataReducer, composeEnhancers(applyMiddleware(thunk)));\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n      ,\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}